// pages/sitemap.xml.js
// This API route dynamically generates an XML sitemap for your Next.js application.
// It fetches static pages, blog posts, and trading indicators from Sanity.io.

import { sanityClient } from '../lib/sanity.client'; // Import your Sanity client

// Define your base URL for the sitemap entries
const BASE_URL = 'https://www.marketproedge.com'; // IMPORTANT: Replace with your actual live domain!

// Function to generate the XML sitemap string
function generateSiteMap(pages, blogPosts, indicators) {
  return `<?xml version="1.0" encoding="UTF-8"?>
   <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
     <!-- Static Pages -->
     ${pages.map(path => {
        // You might want to add lastmod, changefreq, priority for static pages if they change
        return `
       <url>
         <loc>${BASE_URL}${path}</loc>
         <lastmod>${new Date().toISOString()}</lastmod>
         <changefreq>monthly</changefreq>
         <priority>0.7</priority>
       </url>
     `;
     }).join('')}

     <!-- Blog Posts from Sanity -->
     ${blogPosts.map(({ slug, _updatedAt }) => {
        return `
       <url>
         <loc>${BASE_URL}/blog/${slug.current}</loc>
         <lastmod>${_updatedAt}</lastmod>
         <changefreq>weekly</changefreq>
         <priority>0.8</priority>
       </url>
     `;
     }).join('')}

     <!-- Trading Indicators from Sanity -->
     ${indicators.map(({ slug, _updatedAt }) => {
        return `
       <url>
         <loc>${BASE_URL}/indicators/${slug.current}</loc>
         <lastmod>${_updatedAt}</lastmod>
         <changefreq>weekly</changefreq>
         <priority>0.9</priority>
       </url>
     `;
     }).join('')}
   </urlset>
 `;
}

// This is the Next.js API route handler
export async function getServerSideProps({ res }) {
  // Fetch all static pages that you want to include
  const staticPages = [
    '/', // Home page
    '/about',
    '/contact',
    '/marketpulse',
    '/indicators', // All indicators listing page
    '/blog', // All blog posts listing page
    '/terms-of-service',
    '/privacy-policy',
  ];

  // Fetch all blog post slugs and their last updated time from Sanity
  const blogPosts = await sanityClient.fetch(`
    *[_type == "post"] {
      "slug": slug.current,
      _updatedAt
    }
  `);

  // Fetch all indicator slugs and their last updated time from Sanity
  const indicators = await sanityClient.fetch(`
    *[_type == "indicator"] {
      "slug": slug.current,
      _updatedAt
    }
  `);

  // Generate the sitemap XML string
  const sitemap = generateSiteMap(staticPages, blogPosts, indicators);

  // Set the response headers for XML content and caching
  res.setHeader('Content-Type', 'text/xml');
  // Cache for 1 hour (stale-while-revalidate allows serving stale content while fetching fresh)
  res.setHeader('Cache-Control', 'public, s-maxage=3600, stale-while-revalidate=86400');
  res.write(sitemap);
  res.end();

  return {
    props: {}, // getServerSideProps must return props
  };
}

// Export a default function (even if it's empty) as Next.js requires it for pages
export default function SiteMap() {
  // This component will not be rendered, as getServerSideProps handles the response directly.
  return null;
}
